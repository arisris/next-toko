### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Categories {
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  posts(skip: Int = 0, take: Int = 5): [Posts!]!
  type: EnumPostType!
  updatedAt: DateTime!
}

type CommentLikes {
  author: Users
  comment: Comments
  createdAt: DateTime!
  id: Int!
  like: Boolean!
  updatedAt: DateTime!
}

type Comments {
  author: Users
  body: String
  comment: Comments
  comments(skip: Int = 0, take: Int = 5): [Comments!]!
  createdAt: DateTime!
  id: Int!
  likes(skip: Int = 0, take: Int = 5): [CommentLikes!]!
  post: Posts
  status: EnumCommentStatus
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum EnumCommentStatus {
  DELETED
  PENDING
  PUBLISH
  REJECTED
}

enum EnumPostStatus {
  DELETED
  DRAFT
  PRIVATE
  PUBLISH
}

enum EnumPostType {
  BLOGPOST
  PAGES
  PRODUCT
}

enum EnumProductStatus {
  AVAILABLE
  DELETED
  DRAFT
  OUTOFSTOCK
}

enum EnumRestResponse {
  ERROR
  SUCCESS
  WARNING
}

enum EnumRole {
  ADMIN
  SELLER
  USER
}

enum EnumUserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum EnumWalletMutationType {
  DEFAULT
  PURCHASE
  TOPUP
  TRANSFER
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  registerUser(email: String!, name: String!, password: String!, password_conf: String!): RestResponse
}

type PostLikes {
  author: Users
  createdAt: DateTime!
  id: Int!
  like: Boolean!
  post: Posts
  updatedAt: DateTime!
}

type Posts {
  author: Users
  body: String
  categories(skip: Int = 0, take: Int = 5): [Categories!]!
  comments(skip: Int = 0, take: Int = 5): [Comments!]!
  createdAt: DateTime
  id: Int!
  image: String
  name: String!
  postLikes(skip: Int = 0, take: Int = 5): [PostLikes!]!
  productVariants(skip: Int = 0, take: Int = 5): [ProductVariants!]!
  status: EnumPostStatus
  tags(skip: Int = 0, take: Int = 5): [Tags!]!
  type: EnumPostType!
  updatedAt: DateTime!
}

type ProductVariants {
  createdAt: DateTime!
  description: String!
  id: Int!
  image: String
  isMain: Boolean
  name: String!
  price: Int
  products: Posts
  status: EnumProductStatus!
  stock: Int
  type: String
  updatedAt: DateTime!
}

type Query {
  getCategories(id: Int!): Categories
  getCommentLikes(id: Int!): CommentLikes
  getComments(id: Int!): Comments
  getPost(id: Int!): Posts
  getPostLikes(id: Int!): PostLikes
  getProductVariants(id: Int!): ProductVariants
  getSocialAccounts(id: Int!): SocialAccounts
  getTags(id: Int!): Tags
  getUser(id: Int!): Users
  getWallet(id: Int!): Wallet
  getWalletMutations(id: Int!): WalletMutations
}

type RestResponse {
  data: JSON
  message: String
  type: EnumRestResponse
}

type SocialAccounts {
  createdAt: DateTime!
  id: Int!
  provider: String!
  refreshToken: String!
  token: String!
  updatedAt: DateTime!
  user: Users
}

type Tags {
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  posts(skip: Int = 0, take: Int = 5): [Posts!]!
  type: EnumPostType!
  updatedAt: DateTime!
}

type Users {
  commentLikes(skip: Int = 0, take: Int = 5): [CommentLikes!]!
  comments(skip: Int = 0, take: Int = 5): [Comments!]!
  createdAt: DateTime
  email: String!
  emailVerified: Boolean
  id: Int!
  image: String
  latestPosts(skip: Int = 0, take: Int = 5): [Posts!]!
  latestProducts(skip: Int = 0, take: Int = 5): [Posts!]!
  name: String!
  phoneNumber: String
  postLikes(skip: Int = 0, take: Int = 5): [PostLikes!]!
  role: EnumRole
  socialAccounts(skip: Int = 0, take: Int = 5): [SocialAccounts!]!
  status: EnumUserStatus!
  updatedAt: DateTime!
  wallet: Wallet
}

type Wallet {
  amount: Int
  createdAt: DateTime
  id: Int!
  isVerified: Boolean
  mutations(skip: Int = 0, take: Int = 5): [WalletMutations!]!
  updatedAt: DateTime
  verifiedAt: DateTime
}

type WalletMutations {
  amount: Int
  createdAt: DateTime
  id: Int!
  isVerified: Boolean
  type: EnumWalletMutationType!
  updatedAt: DateTime
  verifiedAt: DateTime
  wallet: Wallet
}
