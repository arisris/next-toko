/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ContextTypeObject as ctx } from "./../types/global"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    jsonObject<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    jsonObject<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  EnumCommentStatus: "DELETED" | "PENDING" | "PUBLISH" | "REJECTED"
  EnumPostStatus: "DELETED" | "DRAFT" | "PRIVATE" | "PUBLISH"
  EnumPostType: "BLOGPOST" | "PAGES" | "PRODUCT"
  EnumProductStatus: "AVAILABLE" | "DELETED" | "DRAFT" | "OUTOFSTOCK"
  EnumRestResponse: "ERROR" | "SUCCESS" | "WARNING"
  EnumRole: "ADMIN" | "SELLER" | "USER"
  EnumUserStatus: "ACTIVE" | "INACTIVE" | "SUSPENDED"
  EnumWalletMutationType: "DEFAULT" | "PURCHASE" | "TOPUP" | "TRANSFER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
  JSONObject: any
}

export interface NexusGenObjects {
  Categories: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: number; // Int!
    name: string; // String!
    type: NexusGenEnums['EnumPostType']; // EnumPostType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CommentLikes: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    like: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Comments: { // root type
    body?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    status?: NexusGenEnums['EnumCommentStatus'] | null; // EnumCommentStatus
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: {};
  PostLikes: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    like: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Posts: { // root type
    body?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    image?: string | null; // String
    name: string; // String!
    status?: NexusGenEnums['EnumPostStatus'] | null; // EnumPostStatus
    type: NexusGenEnums['EnumPostType']; // EnumPostType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  ProductVariants: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: number; // Int!
    image?: string | null; // String
    isMain?: boolean | null; // Boolean
    name: string; // String!
    price?: number | null; // Int
    status: NexusGenEnums['EnumProductStatus']; // EnumProductStatus!
    stock?: number | null; // Int
    type?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  RestResponse: { // root type
    data?: NexusGenScalars['JSON'] | null; // JSON
    message?: string | null; // String
    type?: NexusGenEnums['EnumRestResponse'] | null; // EnumRestResponse
  }
  SocialAccounts: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    provider: string; // String!
    refreshToken: string; // String!
    token: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Tags: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: number; // Int!
    name: string; // String!
    type: NexusGenEnums['EnumPostType']; // EnumPostType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Users: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    emailVerified?: boolean | null; // Boolean
    id: number; // Int!
    image?: string | null; // String
    name: string; // String!
    phoneNumber?: string | null; // String
    role?: NexusGenEnums['EnumRole'] | null; // EnumRole
    status: NexusGenEnums['EnumUserStatus']; // EnumUserStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Wallet: { // root type
    amount?: number | null; // Int
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    isVerified?: boolean | null; // Boolean
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    verifiedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  WalletMutations: { // root type
    amount?: number | null; // Int
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    isVerified?: boolean | null; // Boolean
    type: NexusGenEnums['EnumWalletMutationType']; // EnumWalletMutationType!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    verifiedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Categories: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: number; // Int!
    name: string; // String!
    posts: NexusGenRootTypes['Posts'][]; // [Posts!]!
    type: NexusGenEnums['EnumPostType']; // EnumPostType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CommentLikes: { // field return type
    author: NexusGenRootTypes['Users'] | null; // Users
    comment: NexusGenRootTypes['Comments'] | null; // Comments
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    like: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Comments: { // field return type
    author: NexusGenRootTypes['Users'] | null; // Users
    body: string | null; // String
    comment: NexusGenRootTypes['Comments'] | null; // Comments
    comments: NexusGenRootTypes['Comments'][]; // [Comments!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    likes: NexusGenRootTypes['CommentLikes'][]; // [CommentLikes!]!
    post: NexusGenRootTypes['Posts'] | null; // Posts
    status: NexusGenEnums['EnumCommentStatus'] | null; // EnumCommentStatus
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: { // field return type
    registerUser: NexusGenRootTypes['RestResponse'] | null; // RestResponse
  }
  PostLikes: { // field return type
    author: NexusGenRootTypes['Users'] | null; // Users
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    like: boolean; // Boolean!
    post: NexusGenRootTypes['Posts'] | null; // Posts
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Posts: { // field return type
    author: NexusGenRootTypes['Users'] | null; // Users
    body: string | null; // String
    categories: NexusGenRootTypes['Categories'][]; // [Categories!]!
    comments: NexusGenRootTypes['Comments'][]; // [Comments!]!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    image: string | null; // String
    name: string; // String!
    postLikes: NexusGenRootTypes['PostLikes'][]; // [PostLikes!]!
    productVariants: NexusGenRootTypes['ProductVariants'][]; // [ProductVariants!]!
    status: NexusGenEnums['EnumPostStatus'] | null; // EnumPostStatus
    tags: NexusGenRootTypes['Tags'][]; // [Tags!]!
    type: NexusGenEnums['EnumPostType']; // EnumPostType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  ProductVariants: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: number; // Int!
    image: string | null; // String
    isMain: boolean | null; // Boolean
    name: string; // String!
    price: number | null; // Int
    products: NexusGenRootTypes['Posts'] | null; // Posts
    status: NexusGenEnums['EnumProductStatus']; // EnumProductStatus!
    stock: number | null; // Int
    type: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    getCategories: NexusGenRootTypes['Categories'] | null; // Categories
    getCommentLikes: NexusGenRootTypes['CommentLikes'] | null; // CommentLikes
    getComments: NexusGenRootTypes['Comments'] | null; // Comments
    getPost: NexusGenRootTypes['Posts'] | null; // Posts
    getPostLikes: NexusGenRootTypes['PostLikes'] | null; // PostLikes
    getProductVariants: NexusGenRootTypes['ProductVariants'] | null; // ProductVariants
    getSocialAccounts: NexusGenRootTypes['SocialAccounts'] | null; // SocialAccounts
    getTags: NexusGenRootTypes['Tags'] | null; // Tags
    getUser: NexusGenRootTypes['Users'] | null; // Users
    getWallet: NexusGenRootTypes['Wallet'] | null; // Wallet
    getWalletMutations: NexusGenRootTypes['WalletMutations'] | null; // WalletMutations
  }
  RestResponse: { // field return type
    data: NexusGenScalars['JSON'] | null; // JSON
    message: string | null; // String
    type: NexusGenEnums['EnumRestResponse'] | null; // EnumRestResponse
  }
  SocialAccounts: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    provider: string; // String!
    refreshToken: string; // String!
    token: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['Users'] | null; // Users
  }
  Tags: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: number; // Int!
    name: string; // String!
    posts: NexusGenRootTypes['Posts'][]; // [Posts!]!
    type: NexusGenEnums['EnumPostType']; // EnumPostType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Users: { // field return type
    commentLikes: NexusGenRootTypes['CommentLikes'][]; // [CommentLikes!]!
    comments: NexusGenRootTypes['Comments'][]; // [Comments!]!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    emailVerified: boolean | null; // Boolean
    id: number; // Int!
    image: string | null; // String
    latestPosts: NexusGenRootTypes['Posts'][]; // [Posts!]!
    latestProducts: NexusGenRootTypes['Posts'][]; // [Posts!]!
    name: string; // String!
    phoneNumber: string | null; // String
    postLikes: NexusGenRootTypes['PostLikes'][]; // [PostLikes!]!
    role: NexusGenEnums['EnumRole'] | null; // EnumRole
    socialAccounts: NexusGenRootTypes['SocialAccounts'][]; // [SocialAccounts!]!
    status: NexusGenEnums['EnumUserStatus']; // EnumUserStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    wallet: NexusGenRootTypes['Wallet'] | null; // Wallet
  }
  Wallet: { // field return type
    amount: number | null; // Int
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    isVerified: boolean | null; // Boolean
    mutations: NexusGenRootTypes['WalletMutations'][]; // [WalletMutations!]!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    verifiedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  WalletMutations: { // field return type
    amount: number | null; // Int
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    isVerified: boolean | null; // Boolean
    type: NexusGenEnums['EnumWalletMutationType']; // EnumWalletMutationType!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    verifiedAt: NexusGenScalars['DateTime'] | null; // DateTime
    wallet: NexusGenRootTypes['Wallet'] | null; // Wallet
  }
}

export interface NexusGenFieldTypeNames {
  Categories: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    name: 'String'
    posts: 'Posts'
    type: 'EnumPostType'
    updatedAt: 'DateTime'
  }
  CommentLikes: { // field return type name
    author: 'Users'
    comment: 'Comments'
    createdAt: 'DateTime'
    id: 'Int'
    like: 'Boolean'
    updatedAt: 'DateTime'
  }
  Comments: { // field return type name
    author: 'Users'
    body: 'String'
    comment: 'Comments'
    comments: 'Comments'
    createdAt: 'DateTime'
    id: 'Int'
    likes: 'CommentLikes'
    post: 'Posts'
    status: 'EnumCommentStatus'
    updatedAt: 'DateTime'
  }
  Mutation: { // field return type name
    registerUser: 'RestResponse'
  }
  PostLikes: { // field return type name
    author: 'Users'
    createdAt: 'DateTime'
    id: 'Int'
    like: 'Boolean'
    post: 'Posts'
    updatedAt: 'DateTime'
  }
  Posts: { // field return type name
    author: 'Users'
    body: 'String'
    categories: 'Categories'
    comments: 'Comments'
    createdAt: 'DateTime'
    id: 'Int'
    image: 'String'
    name: 'String'
    postLikes: 'PostLikes'
    productVariants: 'ProductVariants'
    status: 'EnumPostStatus'
    tags: 'Tags'
    type: 'EnumPostType'
    updatedAt: 'DateTime'
  }
  ProductVariants: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    image: 'String'
    isMain: 'Boolean'
    name: 'String'
    price: 'Int'
    products: 'Posts'
    status: 'EnumProductStatus'
    stock: 'Int'
    type: 'String'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    getCategories: 'Categories'
    getCommentLikes: 'CommentLikes'
    getComments: 'Comments'
    getPost: 'Posts'
    getPostLikes: 'PostLikes'
    getProductVariants: 'ProductVariants'
    getSocialAccounts: 'SocialAccounts'
    getTags: 'Tags'
    getUser: 'Users'
    getWallet: 'Wallet'
    getWalletMutations: 'WalletMutations'
  }
  RestResponse: { // field return type name
    data: 'JSON'
    message: 'String'
    type: 'EnumRestResponse'
  }
  SocialAccounts: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    provider: 'String'
    refreshToken: 'String'
    token: 'String'
    updatedAt: 'DateTime'
    user: 'Users'
  }
  Tags: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    name: 'String'
    posts: 'Posts'
    type: 'EnumPostType'
    updatedAt: 'DateTime'
  }
  Users: { // field return type name
    commentLikes: 'CommentLikes'
    comments: 'Comments'
    createdAt: 'DateTime'
    email: 'String'
    emailVerified: 'Boolean'
    id: 'Int'
    image: 'String'
    latestPosts: 'Posts'
    latestProducts: 'Posts'
    name: 'String'
    phoneNumber: 'String'
    postLikes: 'PostLikes'
    role: 'EnumRole'
    socialAccounts: 'SocialAccounts'
    status: 'EnumUserStatus'
    updatedAt: 'DateTime'
    wallet: 'Wallet'
  }
  Wallet: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    id: 'Int'
    isVerified: 'Boolean'
    mutations: 'WalletMutations'
    updatedAt: 'DateTime'
    verifiedAt: 'DateTime'
  }
  WalletMutations: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    id: 'Int'
    isVerified: 'Boolean'
    type: 'EnumWalletMutationType'
    updatedAt: 'DateTime'
    verifiedAt: 'DateTime'
    wallet: 'Wallet'
  }
}

export interface NexusGenArgTypes {
  Categories: {
    posts: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
  Comments: {
    comments: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    likes: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
  Mutation: {
    registerUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
      password_conf: string; // String!
    }
  }
  Posts: {
    categories: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    comments: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    postLikes: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    productVariants: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    tags: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
  Query: {
    getCategories: { // args
      id: number; // Int!
    }
    getCommentLikes: { // args
      id: number; // Int!
    }
    getComments: { // args
      id: number; // Int!
    }
    getPost: { // args
      id: number; // Int!
    }
    getPostLikes: { // args
      id: number; // Int!
    }
    getProductVariants: { // args
      id: number; // Int!
    }
    getSocialAccounts: { // args
      id: number; // Int!
    }
    getTags: { // args
      id: number; // Int!
    }
    getUser: { // args
      id: number; // Int!
    }
    getWallet: { // args
      id: number; // Int!
    }
    getWalletMutations: { // args
      id: number; // Int!
    }
  }
  Tags: {
    posts: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
  Users: {
    commentLikes: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    comments: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    latestPosts: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    latestProducts: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    postLikes: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    socialAccounts: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
  Wallet: {
    mutations: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}