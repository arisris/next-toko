{
	// Place your next-toko workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"Nexus Typedef": {
		"prefix": "nType",
		"body": [
			"import { extendType, objectType, nonNull, intArg } from \"nexus\";",
			"import { ${1:Example} } from \"nexus-prisma\";",
			"",
			"const ${1:Example}Type = objectType({",
			"  name: ${1:Example}.$$name,",
			"  description: ${1:Example}.$$description,",
			"  definition(t) {",
			"    t.field(${1:Example}.id);",
			"  }",
			"});",
			"",
			"const ${1:Example}QueryType = extendType({",
			"  type: \"Query\",",
			"  definition(t) {",
			"    t.field(\"get${1:Example}\", {",
			"      type: ${1:Example}.$$name,",
			"      args: {",
			"        id: nonNull(intArg())",
			"      },",
			"      resolve(source, { id }, ctx) {",
			"        return ctx.prisma.${1:/(.*)/${1:/downcase}/}.findUnique({",
			"          where: { id }",
			"        });",
			"      }",
			"    });",
			"}",
			"});",
			"",
			"export default [${1:Example}Type, ${1:Example}QueryType];",
			""
		],
		"description": "Nexus Typedef"
	}
}