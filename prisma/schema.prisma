// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  password      String?
  username      String       @unique
  email         String       @unique
  emailVerified DateTime?
  image         String?
  roleId        Int?
  profile       Profile?
  accounts      Accounts[]
  store         Store?
  ownedProducts Product[]
  role          Role?        @relation(fields: [roleId], references: [id])
  permissions   Permission[]
  storeTeams    StoreTeam[]

  @@map("user")
}

model Accounts {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

// Start custom

/// User Profile Here
model Profile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@map("profile")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  displayName String?
  users       User[]
  permissions Permission[]

  @@map("role")
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String
  displayName String
  users       User[]
  roles       Role[]

  @@map("permission")
}

model Store {
  id        Int         @id @default(autoincrement())
  ownerId   Int         @unique
  name      String
  desc      String?     @db.Text
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  owner     User        @relation(fields: [ownerId], references: [id])
  products  Product[]
  teams     StoreTeam[]

  @@map("store")
}

model StoreTeam {
  id      Int    @id @default(autoincrement())
  storeId Int
  store   Store  @relation(fields: [storeId], references: [id])
  users   User[]

  @@map("store_team")
}

model Product {
  id        Int       @id @default(autoincrement())
  storeId   Int
  creatorId Int
  name      String
  desc      String?   @db.Text
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  store     Store     @relation(fields: [storeId], references: [id])
  creator   User      @relation(fields: [creatorId], references: [id])

  @@map("product")
}

// model ProductCategories {
//   id      String @id @default(cuid())
//   storeId String
//   name    String
//   desc    String @db.Text
// }
