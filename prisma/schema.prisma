// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Nextauth

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roleId        Int?
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  role          Role?     @relation(fields: [roleId], references: [id])

  @@map("user")
}

// Start custom

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  displayName String?
  permissions Permission[]
  users       User[]

  @@map("role")
}

model Permission {
  id          Int     @id @default(autoincrement())
  roleId      Int?
  name        String
  displayName String?
  role        Role?   @relation(fields: [roleId], references: [id])

  @@map("permission")
}

model Site {
  id        String    @id @default(cuid())
  userId    String
  name      String
  desc      String?   @db.Text
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[]

  @@map("site")
}

model Product {
  id        String    @id @default(cuid())
  siteId    String?
  name      String
  desc      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  site      Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("product")
}
